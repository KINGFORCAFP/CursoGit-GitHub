Notas Importantes Curso Git & GitHub:

-- Añadir todos los cambios al tercer stage:
git add --all

-- Ver commits:
git log

-- Agregar repositorio a local:
git remote add origin git@github.com:KINGFORCAFP/CursoGit-GitHub.git

-- Ver si el repositorio se creo correctamente:
git remote -v

-- clave ssh SHA256:KV0Fb0j6A0T/nA+GmLt45JaPI7iWtjQm8oeiI/g5YvE

-- Ver ayudas de opciones de git:
git help --all
git help push

-- Crear archivos desde consola:
touch nombre_de_archivo

-- Comando git clean es peligroso puede borrar archivos que son necesarios.
-- antes de utilizar el comando git clean se recomienda utilizar el comando "git clean -n" para saber que archivos se van a borrar con el comando git clean

-- para retirar un cambio que ya fue trackeado a añadido con el comando git add, se utiliza el comando git checkout mas el nombre del archivo que se desea retirar:
git checkout nombre_archivo

-- para devolver los cambios del stage 2 al stage 1 se utiliza el comando:
git reset HEAD nombre_archivo

-- para revertir cambios de la etapa 3 "commits" se utiliza el comando git revert mas el codigo hash del commit el cual podemos encontrar con el comando git log ejemplo:
git revert be0a8efae7e6b0d3390a20c2ef30f23c4edf29cc

-- El comando "git mv" hace lo siguiente en un solo paso:
mv viejo_nombre nuevo_nombre
git add nuevo_nombre
git rm viejo_nombre
dejando listo el archivo en el stage 2 para posteriormente realizar commit.

-- Para eliminar una rama por consola se utiliza el comando:
git branch -d nombre_rama

-- Para cambiar el nombre a una rama por consola se utiliza el comando:
git branch -m nombre_viejo nombre_nuevo

-- Para crear y pasar a la nueva rama se utiliza el comando:
git checkout -b nombre_rama

-- para crear un merge desde consola se utiliza el comando:
git merge nombre_de_la_rama_a_donde_va_ir_el_merge

-- comando para guardar codigo mientras trabajo sobre otros cambios:
git stash pop

-- para listar los stash que se guardaron se utiliza el comando:
git stash list